{"version":3,"sources":["utils/bounds.js"],"names":["define","deferred","general","typecheck","zeroPosCache","zeroElement","getBounds","body","el","doc","document","documentElement","ownerDocument","docEl","box","_getActualBoundingClientRect","origin","node","contains","createElement","setAttribute","uniqueId","extend","style","top","left","position","appendChild","id","getAttribute","isUndefined","defer","_getOrigin","width","scrollWidth","right","height","scrollHeight","bottom","clientTop","clientLeft","clientWidth","clientHeight","boundingRect","getBoundingClientRect","rect","k","frameElement","defaultView","frameRect","err","getScrollHandleBounds","target","bounds","targetScrollTop","scrollTop","targetIsBody","pageXOffset","pageYOffset","innerHeight","innerWidth","getComputedStyle","scrollBottom","overflow","overflowX","indexOf","parseFloat","borderTopWidth","borderBottomWidth","out","borderLeftWidth","fitAdj","Math","pow","max","scrollPercentage","getVisibleBounds","min","removeUtilElements","removeChild"],"mappings":"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","file":"../../utils/bounds.js","sourcesContent":["define([\n    './deferred',\n    './general',\n    './type-check'\n], function (deferred, general, typecheck) {\n    'use strict';\n    const zeroPosCache = {};\n    let zeroElement = null;\n    function getBounds(body, el) {\n        let doc;\n        if (el === document) {\n            doc = document;\n            el = document.documentElement;\n        } else {\n            doc = el.ownerDocument;\n        }\n        const docEl = doc.documentElement;\n        const box = _getActualBoundingClientRect(el);\n        const origin = _getOrigin(body);\n        box.top -= origin.top;\n        box.left -= origin.left;\n        if (typecheck.isUndefined(box.width)) {\n            box.width = document.body.scrollWidth - box.left - box.right;\n        }\n        if (typecheck.isUndefined(box.height)) {\n            box.height = document.body.scrollHeight - box.top - box.bottom;\n        }\n        box.top = box.top - docEl.clientTop;\n        box.left = box.left - docEl.clientLeft;\n        box.right = doc.body.clientWidth - box.width - box.left;\n        box.bottom = doc.body.clientHeight - box.height - box.top;\n        return box;\n    }\n    function getScrollHandleBounds(body, target) {\n        let bounds;\n        const targetScrollTop = target.scrollTop;\n        const targetIsBody = target === document.body;\n        if (targetIsBody) {\n            target = document.documentElement;\n            bounds = {\n                left: pageXOffset,\n                top: pageYOffset,\n                height: innerHeight,\n                width: innerWidth\n            };\n        } else {\n            bounds = getBounds(body, target);\n        }\n        const style = getComputedStyle(target);\n        const hasBottomScroll = target.scrollWidth > target.clientWidth || [\n            style.overflow,\n            style.overflowX\n        ].indexOf('scroll') >= 0 || !targetIsBody;\n        let scrollBottom = 0;\n        if (hasBottomScroll) {\n            scrollBottom = 15;\n        }\n        const height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;\n        const out = {\n            width: 15,\n            height: height * 0.975 * (height / target.scrollHeight),\n            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15\n        };\n        let fitAdj = 0;\n        if (height < 408 && targetIsBody) {\n            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;\n        }\n        if (!targetIsBody) {\n            out.height = Math.max(out.height, 24);\n        }\n        const scrollPercentage = targetScrollTop / (target.scrollHeight - height);\n        out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);\n        if (targetIsBody) {\n            out.height = Math.max(out.height, 24);\n        }\n        return out;\n    }\n    function getVisibleBounds(body, target) {\n        if (target === document.body) {\n            return {\n                top: pageYOffset,\n                left: pageXOffset,\n                height: innerHeight,\n                width: innerWidth\n            };\n        } else {\n            const bounds = getBounds(body, target);\n            const out = {\n                height: bounds.height,\n                width: bounds.width,\n                top: bounds.top,\n                left: bounds.left\n            };\n            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));\n            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));\n            out.height = Math.min(innerHeight, out.height);\n            out.height -= 2;\n            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));\n            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));\n            out.width = Math.min(innerWidth, out.width);\n            out.width -= 2;\n            if (out.top < pageYOffset) {\n                out.top = pageYOffset;\n            }\n            if (out.left < pageXOffset) {\n                out.left = pageXOffset;\n            }\n            return out;\n        }\n    }\n    function removeUtilElements(body) {\n        if (zeroElement) {\n            body.removeChild(zeroElement);\n        }\n        zeroElement = null;\n    }\n    function _getActualBoundingClientRect(node) {\n        let boundingRect = node.getBoundingClientRect();\n        let rect = {};\n        for (let k in boundingRect) {\n            rect[k] = boundingRect[k];\n        }\n        try {\n            if (node.ownerDocument !== document) {\n                let {frameElement} = node.ownerDocument.defaultView;\n                if (frameElement) {\n                    let frameRect = _getActualBoundingClientRect(frameElement);\n                    rect.top += frameRect.top;\n                    rect.bottom += frameRect.top;\n                    rect.left += frameRect.left;\n                    rect.right += frameRect.left;\n                }\n            }\n        } catch (err) {\n        }\n        return rect;\n    }\n    function _getOrigin(body) {\n        let node = zeroElement;\n        if (!node || !body.contains(node)) {\n            node = document.createElement('div');\n            node.setAttribute('data-tether-id', general.uniqueId());\n            general.extend(node.style, {\n                top: 0,\n                left: 0,\n                position: 'absolute'\n            });\n            body.appendChild(node);\n            zeroElement = node;\n        }\n        const id = node.getAttribute('data-tether-id');\n        if (typecheck.isUndefined(zeroPosCache[id])) {\n            zeroPosCache[id] = _getActualBoundingClientRect(node);\n            deferred.defer(() => {\n                delete zeroPosCache[id];\n            });\n        }\n        return zeroPosCache[id];\n    }\n    return {\n        getBounds: getBounds,\n        getScrollHandleBounds: getScrollHandleBounds,\n        getVisibleBounds: getVisibleBounds,\n        removeUtilElements: removeUtilElements\n    };\n});"]}