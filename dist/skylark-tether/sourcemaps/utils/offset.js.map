{"version":3,"sources":["utils/offset.js"],"names":["define","typecheck","MIRROR_LR","center","left","right","MIRROR_TB","middle","top","bottom","OFFSET_MAP","addOffset","offsets","out","forEach","isString","parseFloat","attachmentToOffset","attachment","isUndefined","autoToFixedAttachment","relativeToAttachment","offsetToPx","offset","size","indexOf","width","height","parseTopLeft","value","split"],"mappings":";;;;;;;AAAAA,QAAQ,gBAAiB,SAAUC,GAC/B,aACA,MAAMC,GACFC,OAAQ,SACRC,KAAM,QACNC,MAAO,QAELC,GACFC,OAAQ,SACRC,IAAK,SACLC,OAAQ,OAENC,GACFF,IAAK,EACLJ,KAAM,EACNG,OAAQ,MACRJ,OAAQ,MACRM,OAAQ,OACRJ,MAAO,QA6DX,OACIM,UA5DJ,YAAsBC,GAClB,MAAMC,GACFL,IAAK,EACLJ,KAAM,GAYV,OAVAQ,EAAQE,QAAQ,EAAEN,IAAAA,EAAKJ,KAAAA,MACfH,EAAUc,SAASP,KACnBA,EAAMQ,WAAWR,IAEjBP,EAAUc,SAASX,KACnBA,EAAOY,WAAWZ,IAEtBS,EAAIL,KAAOA,EACXK,EAAIT,MAAQA,IAETS,GA8CPI,mBA5CJ,SAA4BC,GACxB,IAAId,KAACA,EAAII,IAAEA,GAAOU,EAOlB,OANKjB,EAAUkB,YAAYT,EAAWQ,EAAWd,SAC7CA,EAAOM,EAAWQ,EAAWd,OAE5BH,EAAUkB,YAAYT,EAAWQ,EAAWV,QAC7CA,EAAME,EAAWQ,EAAWV,OAG5BJ,KAAAA,EACAI,IAAAA,IAmCJY,sBAhCJ,SAA+BF,EAAYG,GACvC,IAAIjB,KAACA,EAAII,IAAEA,GAAOU,EAOlB,MANa,SAATd,IACAA,EAAOF,EAAUmB,EAAqBjB,OAE9B,SAARI,IACAA,EAAMF,EAAUe,EAAqBb,OAGrCJ,KAAAA,EACAI,IAAAA,IAuBJc,WApBJ,SAAoBC,EAAQC,GAOxB,OANIvB,EAAUc,SAASQ,EAAOnB,QAAuC,IAA9BmB,EAAOnB,KAAKqB,QAAQ,OACvDF,EAAOnB,KAAOY,WAAWO,EAAOnB,MAAQ,IAAMoB,EAAKE,OAEnDzB,EAAUc,SAASQ,EAAOf,OAAqC,IAA7Be,EAAOf,IAAIiB,QAAQ,OACrDF,EAAOf,IAAMQ,WAAWO,EAAOf,KAAO,IAAMgB,EAAKG,QAE9CJ,GAcPK,aAZJ,SAAsBC,GAClB,MAAOrB,EAAKJ,GAAQyB,EAAMC,MAAM,KAChC,OACItB,IAAAA,EACAJ,KAAAA","file":"../../utils/offset.js","sourcesContent":["define(['./type-check'], function (typecheck) {\n    'use strict';\n    const MIRROR_LR = {\n        center: 'center',\n        left: 'right',\n        right: 'left'\n    };\n    const MIRROR_TB = {\n        middle: 'middle',\n        top: 'bottom',\n        bottom: 'top'\n    };\n    const OFFSET_MAP = {\n        top: 0,\n        left: 0,\n        middle: '50%',\n        center: '50%',\n        bottom: '100%',\n        right: '100%'\n    };\n    function addOffset(...offsets) {\n        const out = {\n            top: 0,\n            left: 0\n        };\n        offsets.forEach(({top, left}) => {\n            if (typecheck.isString(top)) {\n                top = parseFloat(top);\n            }\n            if (typecheck.isString(left)) {\n                left = parseFloat(left);\n            }\n            out.top += top;\n            out.left += left;\n        });\n        return out;\n    }\n    function attachmentToOffset(attachment) {\n        let {left, top} = attachment;\n        if (!typecheck.isUndefined(OFFSET_MAP[attachment.left])) {\n            left = OFFSET_MAP[attachment.left];\n        }\n        if (!typecheck.isUndefined(OFFSET_MAP[attachment.top])) {\n            top = OFFSET_MAP[attachment.top];\n        }\n        return {\n            left,\n            top\n        };\n    }\n    function autoToFixedAttachment(attachment, relativeToAttachment) {\n        let {left, top} = attachment;\n        if (left === 'auto') {\n            left = MIRROR_LR[relativeToAttachment.left];\n        }\n        if (top === 'auto') {\n            top = MIRROR_TB[relativeToAttachment.top];\n        }\n        return {\n            left,\n            top\n        };\n    }\n    function offsetToPx(offset, size) {\n        if (typecheck.isString(offset.left) && offset.left.indexOf('%') !== -1) {\n            offset.left = parseFloat(offset.left) / 100 * size.width;\n        }\n        if (typecheck.isString(offset.top) && offset.top.indexOf('%') !== -1) {\n            offset.top = parseFloat(offset.top) / 100 * size.height;\n        }\n        return offset;\n    }\n    function parseTopLeft(value) {\n        const [top, left] = value.split(' ');\n        return {\n            top,\n            left\n        };\n    }\n    return {\n        addOffset: addOffset,\n        attachmentToOffset: attachmentToOffset,\n        autoToFixedAttachment: autoToFixedAttachment,\n        offsetToPx: offsetToPx,\n        parseTopLeft: parseTopLeft\n    };\n});"]}