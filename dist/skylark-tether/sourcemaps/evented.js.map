{"version":3,"sources":["evented.js"],"names":["define","typecheck","Evented","[object Object]","event","handler","ctx","once","isUndefined","this","bindings","push","on","forEach","binding","index","splice","args","context","apply"],"mappings":";;;;;;;AAAAA,QAAQ,sBAAuB,SAAUC,GACrC,aAgDA,OAASC,cA9CLC,GAAGC,EAAOC,EAASC,EAAKC,GAAO,GAY3B,OAXIN,EAAUO,YAAYC,KAAKC,YAC3BD,KAAKC,aAELT,EAAUO,YAAYC,KAAKC,SAASN,MACpCK,KAAKC,SAASN,OAElBK,KAAKC,SAASN,GAAOO,MACjBN,QAAAA,EACAC,IAAAA,EACAC,KAAAA,IAEGE,KAEXN,KAAKC,EAAOC,EAASC,GACjB,OAAOG,KAAKG,GAAGR,EAAOC,EAASC,GAAK,GAExCH,IAAIC,EAAOC,GACP,OAAIJ,EAAUO,YAAYC,KAAKC,WAAaT,EAAUO,YAAYC,KAAKC,SAASN,IACrEK,MAEPR,EAAUO,YAAYH,UACfI,KAAKC,SAASN,GAErBK,KAAKC,SAASN,GAAOS,QAAQ,CAACC,EAASC,KAC/BD,EAAQT,UAAYA,GACpBI,KAAKC,SAASN,GAAOY,OAAOD,EAAO,KAIxCN,MAEXN,QAAQC,KAAUa,GAWd,OAVKhB,EAAUO,YAAYC,KAAKC,WAAaD,KAAKC,SAASN,IACvDK,KAAKC,SAASN,GAAOS,QAAQ,CAACC,EAASC,KACnC,MAAMT,IAACA,EAAGD,QAAEA,EAAOE,KAAEA,GAAQO,EACvBI,EAAUZ,GAAOG,KACvBJ,EAAQc,MAAMD,EAASD,GACnBV,GACAE,KAAKC,SAASN,GAAOY,OAAOD,EAAO,KAIxCN","file":"../evented.js","sourcesContent":["define(['./utils/type-check'], function (typecheck) {\n    'use strict';\n    class Evented {\n        on(event, handler, ctx, once = false) {\n            if (typecheck.isUndefined(this.bindings)) {\n                this.bindings = {};\n            }\n            if (typecheck.isUndefined(this.bindings[event])) {\n                this.bindings[event] = [];\n            }\n            this.bindings[event].push({\n                handler,\n                ctx,\n                once\n            });\n            return this;\n        }\n        once(event, handler, ctx) {\n            return this.on(event, handler, ctx, true);\n        }\n        off(event, handler) {\n            if (typecheck.isUndefined(this.bindings) || typecheck.isUndefined(this.bindings[event])) {\n                return this;\n            }\n            if (typecheck.isUndefined(handler)) {\n                delete this.bindings[event];\n            } else {\n                this.bindings[event].forEach((binding, index) => {\n                    if (binding.handler === handler) {\n                        this.bindings[event].splice(index, 1);\n                    }\n                });\n            }\n            return this;\n        }\n        trigger(event, ...args) {\n            if (!typecheck.isUndefined(this.bindings) && this.bindings[event]) {\n                this.bindings[event].forEach((binding, index) => {\n                    const {ctx, handler, once} = binding;\n                    const context = ctx || this;\n                    handler.apply(context, args);\n                    if (once) {\n                        this.bindings[event].splice(index, 1);\n                    }\n                });\n            }\n            return this;\n        }\n    }\n    return { Evented: Evented };\n});"]}