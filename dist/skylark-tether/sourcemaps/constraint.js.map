{"version":3,"sources":["constraint.js"],"names":["define","_classes","deferred","general","bounds","typecheck","BOUNDS_FORMAT","getBoundingRect","body","tether","to","scrollParents","pageXOffset","pageYOffset","innerWidth","innerHeight","document","documentElement","isUndefined","nodeType","node","size","getBounds","pos","style","getComputedStyle","left","top","width","height","ownerDocument","win","defaultView","forEach","side","i","toUpperCase","substr","parseFloat","[object Object]","targetAttachment","this","options","constraints","cache","bodyElement","element","lastSize","targetSize","getTargetBounds","targetHeight","targetWidth","classes","classPrefix","allClasses","getClass","constraint","outOfBoundsClass","pinnedClass","push","cls","_getAllClasses","addClasses","tAttachment","extend","eAttachment","attachment","changeAttachX","changeAttachY","pin","indexOf","split","_flipYTogether","_flipXTogether","isString","map","p","trim","pinned","oob","_calculateOOBAndPinnedLeft","_calculateOOBAndPinnedTop","length","oobClass","_addOutOfBoundsClass","updateAttachClasses","trigger","defer","addTargetClasses","updateClasses","target"],"mappings":"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","file":"../constraint.js","sourcesContent":["define([\n    './utils/classes',\n    './utils/deferred',\n    './utils/general',\n    './utils/bounds',\n    './utils/type-check'\n], function (_classes, deferred, general, bounds, typecheck) {\n    'use strict';\n    const BOUNDS_FORMAT = [\n        'left',\n        'top',\n        'right',\n        'bottom'\n    ];\n    function getBoundingRect(body, tether, to) {\n        if (!to) {\n            return null;\n        }\n        if (to === 'scrollParent') {\n            to = tether.scrollParents[0];\n        } else if (to === 'window') {\n            to = [\n                pageXOffset,\n                pageYOffset,\n                innerWidth + pageXOffset,\n                innerHeight + pageYOffset\n            ];\n        }\n        if (to === document) {\n            to = to.documentElement;\n        }\n        if (!typecheck.isUndefined(to.nodeType)) {\n            const node = to;\n            const size = bounds.getBounds(body, to);\n            const pos = size;\n            const style = getComputedStyle(to);\n            to = [\n                pos.left,\n                pos.top,\n                size.width + pos.left,\n                size.height + pos.top\n            ];\n            if (node.ownerDocument !== document) {\n                let win = node.ownerDocument.defaultView;\n                to[0] += win.pageXOffset;\n                to[1] += win.pageYOffset;\n                to[2] += win.pageXOffset;\n                to[3] += win.pageYOffset;\n            }\n            BOUNDS_FORMAT.forEach((side, i) => {\n                side = side[0].toUpperCase() + side.substr(1);\n                if (side === 'Top' || side === 'Left') {\n                    to[i] += parseFloat(style[`border${ side }Width`]);\n                } else {\n                    to[i] -= parseFloat(style[`border${ side }Width`]);\n                }\n            });\n        }\n        return to;\n    }\n    function _addOutOfBoundsClass(oob, addClasses, classes, classPrefix, outOfBoundsClass) {\n        if (oob.length) {\n            let oobClass;\n            if (!typecheck.isUndefined(outOfBoundsClass)) {\n                oobClass = outOfBoundsClass;\n            } else {\n                oobClass = _classes.getClass('out-of-bounds', classes, classPrefix);\n            }\n            addClasses.push(oobClass);\n            oob.forEach(side => {\n                addClasses.push(`${ oobClass }-${ side }`);\n            });\n        }\n    }\n    function _calculateOOBAndPinnedLeft(left, bounds, width, pin, pinned, oob) {\n        if (left < bounds[0]) {\n            if (pin.indexOf('left') >= 0) {\n                left = bounds[0];\n                pinned.push('left');\n            } else {\n                oob.push('left');\n            }\n        }\n        if (left + width > bounds[2]) {\n            if (pin.indexOf('right') >= 0) {\n                left = bounds[2] - width;\n                pinned.push('right');\n            } else {\n                oob.push('right');\n            }\n        }\n        return left;\n    }\n    function _calculateOOBAndPinnedTop(top, bounds, height, pin, pinned, oob) {\n        if (top < bounds[1]) {\n            if (pin.indexOf('top') >= 0) {\n                top = bounds[1];\n                pinned.push('top');\n            } else {\n                oob.push('top');\n            }\n        }\n        if (top + height > bounds[3]) {\n            if (pin.indexOf('bottom') >= 0) {\n                top = bounds[3] - height;\n                pinned.push('bottom');\n            } else {\n                oob.push('bottom');\n            }\n        }\n        return top;\n    }\n    function _flipXTogether(tAttachment, eAttachment, bounds, width, targetWidth, left) {\n        if (left < bounds[0] && tAttachment.left === 'left') {\n            if (eAttachment.left === 'right') {\n                left += targetWidth;\n                tAttachment.left = 'right';\n                left += width;\n                eAttachment.left = 'left';\n            } else if (eAttachment.left === 'left') {\n                left += targetWidth;\n                tAttachment.left = 'right';\n                left -= width;\n                eAttachment.left = 'right';\n            }\n        } else if (left + width > bounds[2] && tAttachment.left === 'right') {\n            if (eAttachment.left === 'left') {\n                left -= targetWidth;\n                tAttachment.left = 'left';\n                left -= width;\n                eAttachment.left = 'right';\n            } else if (eAttachment.left === 'right') {\n                left -= targetWidth;\n                tAttachment.left = 'left';\n                left += width;\n                eAttachment.left = 'left';\n            }\n        } else if (tAttachment.left === 'center') {\n            if (left + width > bounds[2] && eAttachment.left === 'left') {\n                left -= width;\n                eAttachment.left = 'right';\n            } else if (left < bounds[0] && eAttachment.left === 'right') {\n                left += width;\n                eAttachment.left = 'left';\n            }\n        }\n        return left;\n    }\n    function _flipYTogether(tAttachment, eAttachment, bounds, height, targetHeight, top) {\n        if (tAttachment.top === 'top') {\n            if (eAttachment.top === 'bottom' && top < bounds[1]) {\n                top += targetHeight;\n                tAttachment.top = 'bottom';\n                top += height;\n                eAttachment.top = 'top';\n            } else if (eAttachment.top === 'top' && top + height > bounds[3] && top - (height - targetHeight) >= bounds[1]) {\n                top -= height - targetHeight;\n                tAttachment.top = 'bottom';\n                eAttachment.top = 'bottom';\n            }\n        }\n        if (tAttachment.top === 'bottom') {\n            if (eAttachment.top === 'top' && top + height > bounds[3]) {\n                top -= targetHeight;\n                tAttachment.top = 'top';\n                top -= height;\n                eAttachment.top = 'bottom';\n            } else if (eAttachment.top === 'bottom' && top < bounds[1] && top + (height * 2 - targetHeight) <= bounds[3]) {\n                top += height - targetHeight;\n                tAttachment.top = 'top';\n                eAttachment.top = 'top';\n            }\n        }\n        if (tAttachment.top === 'middle') {\n            if (top + height > bounds[3] && eAttachment.top === 'top') {\n                top -= height;\n                eAttachment.top = 'bottom';\n            } else if (top < bounds[1] && eAttachment.top === 'bottom') {\n                top += height;\n                eAttachment.top = 'top';\n            }\n        }\n        return top;\n    }\n    function _getAllClasses(classes, classPrefix, constraints) {\n        const allClasses = [\n            _classes.getClass('pinned', classes, classPrefix),\n            _classes.getClass('out-of-bounds', classes, classPrefix)\n        ];\n        constraints.forEach(constraint => {\n            const {outOfBoundsClass, pinnedClass} = constraint;\n            if (outOfBoundsClass) {\n                allClasses.push(outOfBoundsClass);\n            }\n            if (pinnedClass) {\n                allClasses.push(pinnedClass);\n            }\n        });\n        allClasses.forEach(cls => {\n            [\n                'left',\n                'top',\n                'right',\n                'bottom'\n            ].forEach(side => {\n                allClasses.push(`${ cls }-${ side }`);\n            });\n        });\n        return allClasses;\n    }\n    return {\n        position({top, left, targetAttachment}) {\n            if (!this.options.constraints) {\n                return true;\n            }\n            let {height, width} = this.cache('element-bounds', () => {\n                return bounds.getBounds(this.bodyElement, this.element);\n            });\n            if (width === 0 && height === 0 && !typecheck.isUndefined(this.lastSize)) {\n                ({width, height} = this.lastSize);\n            }\n            const targetSize = this.cache('target-bounds', () => {\n                return this.getTargetBounds();\n            });\n            const {\n                height: targetHeight,\n                width: targetWidth\n            } = targetSize;\n            const {classes, classPrefix} = this.options;\n            const allClasses = _getAllClasses(classes, classPrefix, this.options.constraints);\n            const addClasses = [];\n            const tAttachment = general.extend({}, targetAttachment);\n            const eAttachment = general.extend({}, this.attachment);\n            this.options.constraints.forEach(constraint => {\n                let {to, attachment, pin} = constraint;\n                if (typecheck.isUndefined(attachment)) {\n                    attachment = '';\n                }\n                let changeAttachX, changeAttachY;\n                if (attachment.indexOf(' ') >= 0) {\n                    [changeAttachY, changeAttachX] = attachment.split(' ');\n                } else {\n                    changeAttachX = changeAttachY = attachment;\n                }\n                const bounds = getBoundingRect(this.bodyElement, this, to);\n                if (changeAttachY === 'target' || changeAttachY === 'both') {\n                    if (top < bounds[1] && tAttachment.top === 'top') {\n                        top += targetHeight;\n                        tAttachment.top = 'bottom';\n                    }\n                    if (top + height > bounds[3] && tAttachment.top === 'bottom') {\n                        top -= targetHeight;\n                        tAttachment.top = 'top';\n                    }\n                }\n                if (changeAttachY === 'together') {\n                    top = _flipYTogether(tAttachment, eAttachment, bounds, height, targetHeight, top);\n                }\n                if (changeAttachX === 'target' || changeAttachX === 'both') {\n                    if (left < bounds[0] && tAttachment.left === 'left') {\n                        left += targetWidth;\n                        tAttachment.left = 'right';\n                    }\n                    if (left + width > bounds[2] && tAttachment.left === 'right') {\n                        left -= targetWidth;\n                        tAttachment.left = 'left';\n                    }\n                }\n                if (changeAttachX === 'together') {\n                    left = _flipXTogether(tAttachment, eAttachment, bounds, width, targetWidth, left);\n                }\n                if (changeAttachY === 'element' || changeAttachY === 'both') {\n                    if (top < bounds[1] && eAttachment.top === 'bottom') {\n                        top += height;\n                        eAttachment.top = 'top';\n                    }\n                    if (top + height > bounds[3] && eAttachment.top === 'top') {\n                        top -= height;\n                        eAttachment.top = 'bottom';\n                    }\n                }\n                if (changeAttachX === 'element' || changeAttachX === 'both') {\n                    if (left < bounds[0]) {\n                        if (eAttachment.left === 'right') {\n                            left += width;\n                            eAttachment.left = 'left';\n                        } else if (eAttachment.left === 'center') {\n                            left += width / 2;\n                            eAttachment.left = 'left';\n                        }\n                    }\n                    if (left + width > bounds[2]) {\n                        if (eAttachment.left === 'left') {\n                            left -= width;\n                            eAttachment.left = 'right';\n                        } else if (eAttachment.left === 'center') {\n                            left -= width / 2;\n                            eAttachment.left = 'right';\n                        }\n                    }\n                }\n                if (typecheck.isString(pin)) {\n                    pin = pin.split(',').map(p => p.trim());\n                } else if (pin === true) {\n                    pin = [\n                        'top',\n                        'left',\n                        'right',\n                        'bottom'\n                    ];\n                }\n                pin = pin || [];\n                const pinned = [];\n                const oob = [];\n                left = _calculateOOBAndPinnedLeft(left, bounds, width, pin, pinned, oob);\n                top = _calculateOOBAndPinnedTop(top, bounds, height, pin, pinned, oob);\n                if (pinned.length) {\n                    let pinnedClass;\n                    if (!typecheck.isUndefined(this.options.pinnedClass)) {\n                        pinnedClass = this.options.pinnedClass;\n                    } else {\n                        pinnedClass = _classes.getClass('pinned', classes, classPrefix);\n                    }\n                    addClasses.push(pinnedClass);\n                    pinned.forEach(side => {\n                        addClasses.push(`${ pinnedClass }-${ side }`);\n                    });\n                }\n                _addOutOfBoundsClass(oob, addClasses, classes, classPrefix, this.options.outOfBoundsClass);\n                if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {\n                    eAttachment.left = tAttachment.left = false;\n                }\n                if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {\n                    eAttachment.top = tAttachment.top = false;\n                }\n                if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== this.attachment.top || eAttachment.left !== this.attachment.left) {\n                    this.updateAttachClasses(eAttachment, tAttachment);\n                    this.trigger('update', {\n                        attachment: eAttachment,\n                        targetAttachment: tAttachment\n                    });\n                }\n            });\n            deferred.defer(() => {\n                if (!(this.options.addTargetClasses === false)) {\n                    _classes.updateClasses(this.target, addClasses, allClasses);\n                }\n                _classes.updateClasses(this.element, addClasses, allClasses);\n            });\n            return {\n                top,\n                left\n            };\n        }\n    };\n});"]}